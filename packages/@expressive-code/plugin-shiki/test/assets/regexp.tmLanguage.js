export const regexp = {
	information_for_contributors: [
		'This file is autogenerated. Do not edit it manually. Instead, edit the `generate.ts` script and run it.',
		'Sources for this file are:',
		'https://github.com/github-linguist/linguist/',
	],
	lastUpdated: '2024-06-05T13:56:45.784Z',
	regexGrammarVersion: 'v7.29.0',
	name: 'regexp',
	aliases: ['regex'],
	scopeName: 'text.regex',
	patterns: [
		{
			include: '#regexp',
		},
	],
	repository: {
		'regex-character-class': {
			patterns: [
				{
					name: 'constant.character.character-class.regexp',
					match: '\\\\[wWsSdDtrnvf]|\\.',
				},
				{
					name: 'constant.character.numeric.regexp',
					match: '\\\\([0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4})',
				},
				{
					name: 'constant.character.control.regexp',
					match: '\\\\c[A-Z]',
				},
				{
					name: 'constant.character.escape.backslash.regexp',
					match: '\\\\.',
				},
			],
		},
		regexp: {
			patterns: [
				{
					name: 'keyword.control.anchor.regexp',
					match: '\\\\[bB]|\\^|\\$',
				},
				{
					name: 'keyword.other.back-reference.regexp',
					match: '\\\\[1-9]\\d*|\\\\k<[a-zA-Z_$][\\w$]*>',
				},
				{
					name: 'keyword.operator.quantifier.regexp',
					match: '[?+*]|\\{(\\d+,\\d+|\\d+,|,\\d+|\\d+)\\}\\??',
				},
				{
					name: 'keyword.operator.or.regexp',
					match: '\\|',
				},
				{
					name: 'meta.group.assertion.regexp',
					begin: '(\\()(?:(\\?=)|(\\?!)|(\\?<=)|(\\?<!))',
					end: '(\\))',
					patterns: [
						{
							include: '#regexp',
						},
					],
					beginCaptures: {
						1: {
							name: 'punctuation.definition.group.regexp',
						},
						2: {
							name: 'meta.assertion.look-ahead.regexp',
						},
						3: {
							name: 'meta.assertion.negative-look-ahead.regexp',
						},
						4: {
							name: 'meta.assertion.look-behind.regexp',
						},
						5: {
							name: 'meta.assertion.negative-look-behind.regexp',
						},
					},
					endCaptures: {
						1: {
							name: 'punctuation.definition.group.regexp',
						},
					},
				},
				{
					name: 'meta.group.regexp',
					begin: '\\(((\\?:)|(\\?<[a-zA-Z_$][\\w$]*>))?',
					end: '\\)',
					patterns: [
						{
							include: '#regexp',
						},
					],
					beginCaptures: {
						0: {
							name: 'punctuation.definition.group.regexp',
						},
					},
					endCaptures: {
						0: {
							name: 'punctuation.definition.group.regexp',
						},
					},
				},
				{
					name: 'constant.other.character-class.set.regexp',
					begin: '(\\[)(\\^)?',
					end: '(\\])',
					patterns: [
						{
							name: 'constant.other.character-class.range.regexp',
							match:
								'(?:.|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))\\-(?:[^\\]\\\\]|(\\\\(?:[0-7]{3}|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}))|(\\\\c[A-Z])|(\\\\.))',
							captures: {
								1: {
									name: 'constant.character.numeric.regexp',
								},
								2: {
									name: 'constant.character.control.regexp',
								},
								3: {
									name: 'constant.character.escape.backslash.regexp',
								},
								4: {
									name: 'constant.character.numeric.regexp',
								},
								5: {
									name: 'constant.character.control.regexp',
								},
								6: {
									name: 'constant.character.escape.backslash.regexp',
								},
							},
						},
						{
							include: '#regex-character-class',
						},
					],
					beginCaptures: {
						1: {
							name: 'punctuation.definition.character-class.regexp',
						},
						2: {
							name: 'keyword.operator.negation.regexp',
						},
					},
					endCaptures: {
						1: {
							name: 'punctuation.definition.character-class.regexp',
						},
					},
				},
				{
					include: '#regex-character-class',
				},
				{
					match: '.',
					name: 'string.regexp',
				},
			],
		},
	},
}
